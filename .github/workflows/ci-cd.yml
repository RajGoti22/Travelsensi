name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          travelsensei/package-lock.json
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install Frontend Dependencies
      run: |
        cd travelsensei
        npm ci
    
    - name: Lint Backend
      run: |
        cd backend
        npm run lint || echo "Linting not configured"
    
    - name: Lint Frontend
      run: |
        cd travelsensei
        npm run lint || echo "Linting not configured"
    
    - name: Test Backend
      run: |
        cd backend
        npm test || echo "Tests not configured"
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/travelsensei_test
        JWT_SECRET: test-secret-key-for-ci-cd-pipeline
    
    - name: Test Frontend
      run: |
        cd travelsensei
        npm test -- --coverage --watchAll=false || echo "Tests not configured"
    
    - name: Build Frontend
      run: |
        cd travelsensei
        npm run build
    
    - name: Upload Frontend Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: travelsensei/build/
        retention-days: 7

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install Dependencies
      run: |
        cd backend && npm ci
        cd ../travelsensei && npm ci
    
    - name: Run Security Audit - Backend
      run: |
        cd backend
        npm audit --audit-level high
    
    - name: Run Security Audit - Frontend
      run: |
        cd travelsensei
        npm audit --audit-level high

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.travelsensei.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Download Frontend Build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build-18.x
        path: travelsensei/build/
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: Deploy to Heroku staging app
        # heroku git:remote -a travelsensei-staging
        # git push heroku develop:main

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://travelsensei.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Download Frontend Build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build-18.x
        path: travelsensei/build/
    
    - name: Deploy Backend to Production
      if: success()
      run: |
        echo "Deploying backend to production..."
        # Add your production deployment commands here
        # Example: Deploy to Heroku
        # heroku git:remote -a travelsensei-backend
        # git push heroku main
    
    - name: Deploy Frontend to Production
      if: success()
      run: |
        echo "Deploying frontend to production..."
        # Add your production deployment commands here
        # Example: Deploy to Vercel or Netlify
        # npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
    
    - name: Health Check
      if: success()
      run: |
        sleep 30
        curl -f https://api.travelsensei.com/health || exit 1
        echo "Production deployment successful!"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Deployment Status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production deployment successful!"
        elif [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ Staging deployment successful!"
        else
          echo "❌ Deployment failed"
        fi
        # Add notification logic here (Slack, Discord, email, etc.)